# Project installer (Windows)
Param()

$ErrorActionPreference = 'Stop'

function Info($m){ Write-Host $m -ForegroundColor Cyan }
function Ok($m){ Write-Host $m -ForegroundColor Green }
function Warn($m){ Write-Host $m -ForegroundColor Yellow }
function Err($m){ Write-Host $m -ForegroundColor Red }

$root = Split-Path -Parent $PSScriptRoot
Set-Location $root

Info "1) Python venv"
# Prefer existing venv at .\venv
$venvPy = Join-Path $root 'venv\Scripts\python.exe'
if (-not (Test-Path $venvPy -PathType Leaf)) {
	# Try .\.venv as fallback
	$venvPy = Join-Path $root '.venv\Scripts\python.exe'
}
if (-not (Test-Path $venvPy -PathType Leaf)) {
	# Create venv at .\venv using py -3 or python
	$target = Join-Path $root 'venv'
	if (Get-Command py -ErrorAction SilentlyContinue) {
		Info "Creating venv with py -3"
		& py -3 -m venv $target
	} else {
		Info "Creating venv with python"
		& python -m venv $target
	}
	$venvPy = Join-Path $root 'venv\Scripts\python.exe'
}
if (-not (Test-Path $venvPy -PathType Leaf)) { Err "Failed to create/find venv"; exit 1 }
Ok "Venv: $venvPy"

Info "2) Python deps"
$req = Join-Path $root 'python\requirements.txt'
& $venvPy -m pip install --upgrade pip | Out-Null
& $venvPy -m pip install -r $req

Info "3) Node deps"
try {
	# Always use npm install to refresh lock and avoid CI lockfile drift
	& cmd /c "npm install"
	if ($LASTEXITCODE -ne 0) { throw "npm install failed ($LASTEXITCODE)" }
	Ok "Node packages installed"
} catch {
	Err "Node install error: $($_.Exception.Message)"
	exit 1
}

Info "4) .env defaults"
$envFile = Join-Path $root '.env'
if (-not (Test-Path $envFile -PathType Leaf)) {
	@"
# Auto-generated by scripts/install.ps1
RDKIT_PYTHON=./venv/Scripts/python.exe
RDKIT_URL=
TECTONIC_BIN=./tectonic.exe
DVISVGM_PATH=./dvisvgm-3.5-win64/dvisvgm.exe
GHOSTSCRIPT_PATH=./ghostpdl-10.06.0/bin/gswin64c.exe
DVISVGM_FONTMAP=./fontmaps/tex2sys.map
DVISVGM_FONT_FORMAT=woff2
FONTCONFIG_FILE=./fontconfig/fonts.conf
FONTCONFIG_PATH=./fontconfig
FONTCONFIG_CACHE=./fontconfig/cache
"@ | Set-Content -Encoding UTF8 $envFile
	Ok ".env created"
} else {
	Warn ".env exists; leaving as-is"
}

# Ensure fontconfig cache dir exists
New-Item -ItemType Directory -Force -Path (Join-Path $root 'fontconfig\cache') | Out-Null

Info "5) Toolchain presence"
$tect = Get-Command (Join-Path $root 'tectonic.exe') -ErrorAction SilentlyContinue
$dsvg = Get-Command (Join-Path $root 'dvisvgm-3.5-win64\dvisvgm.exe') -ErrorAction SilentlyContinue
$gsc = Test-Path (Join-Path $root 'ghostpdl-10.06.0\bin\gswin64c.exe') -PathType Leaf
if ($tect) { Ok "tectonic found" } else { Warn "tectonic.exe missing; PGFPlots requires it" }
if ($dsvg) { Ok "dvisvgm found" } else { Warn "dvisvgm.exe missing; PGFPlots requires it" }
if ($gsc) { Ok "Ghostscript found" } else { Warn "gswin64c.exe missing; dvisvgm may warn" }

Ok "Install complete"
Write-Host "Next:" -ForegroundColor Cyan
Write-Host "- Run: powershell -ExecutionPolicy Bypass -File .\scripts\test-all.ps1" -ForegroundColor Cyan
Write-Host "- Or: npm run chapter:build && npm run dev" -ForegroundColor Cyan
